{
	"info": {
		"_postman_id": "d789aae8-9722-4167-9353-e82505e1d796",
		"name": "Smoke Test Collection - V2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20582136"
	},
	"item": [
		{
			"name": "User Actions Copy",
			"item": [
				{
					"name": "Register a new user.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Register a new user', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\" Get New Registered User ID \", () => {\r",
									"  \r",
									"  const{data} = pm.response.json();\r",
									"   pm.environment.set('NewUserRegID', data.id);\r",
									"   pm.environment.set('UserEmail', data.email);\r",
									"   \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"first_name\":\"{{$randomFirstName}}\",\"middle_name\":\"der\",\"last_name\":\"{{$randomLastName}}\",\"username\":\"{{$randomUserName}}\",\"email\":\"{{$randomEmail}}\",\"password\":\"password123\",\"password_confirmation\":\"password123\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Generate credentials.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Login', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\" Get New Registered User ID \", () => {",
									"  ",
									"  const{data} = pm.response.json();",
									"   pm.environment.set('v1Token', data.access_token);",
									" ",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"{{UserEmail}}\",\"password\":\"password123\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login via Google.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Login via Google', function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"id\":19,\"first_name\":\"ifoidzmrnusnhuzsfyjsdbcfbyqrmphbcxaewppdtnzbhzhjnqazuisngvhwamvezxydoxdluxdhpqlrqdduh\",\"last_name\":\"vkgczjhpertqynqkbadpzvgxqgi\",\"middle_name\":\"pwpioxvwwnntheaoynotzlgjwcayuvydy\",\"email\":\"acir.mee@gmail.com\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/social-media/google",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"social-media",
								"google"
							]
						},
						"description": "This endpoint will be used by frontend to post an\nupdated fields once the social media login is successfully done.\n<aside class=\"warning\">QA: Please disregard this endpoints</aside>"
					},
					"response": []
				},
				{
					"name": "Login via Discord.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Login via Discord', function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"feest.estevan@example.net\",\"id\":20,\"username\":\"corporis\",\"first_name\":\"ufxwldyechaqmaxfsbrsgtaflbdtvfqtftjyvipciwqofssmodhxwedoyrpfsxwdzaxeyst\",\"middle_name\":\"vppdirgxwxiqbl\",\"last_name\":\"guwueeqjnmksikgdhipnmbwedupfmejmsrodyeemkoesaymeok\"}\r\n\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/social-media/discord",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"social-media",
								"discord"
							]
						},
						"description": "This endpoint will be used by frontend to post an\nupdated fields once the social media login is successfully done.\n<aside class=\"warning\">QA: Please disregard this endpoints</aside>"
					},
					"response": []
				},
				{
					"name": "Logs out an authenticated user.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Logout an authenticated user', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "{{v1Token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Games Copy",
			"item": [
				{
					"name": "Register a new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Register a new user', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\" Get New Registered User ID \", () => {\r",
									"  \r",
									"  const{data} = pm.response.json();\r",
									"   pm.environment.set('NewUserRegID', data.id);\r",
									"   pm.environment.set('UserEmail', data.email);\r",
									"   \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"first_name\":\"{{$randomFirstName}}\",\"middle_name\":\"der\",\"last_name\":\"{{$randomLastName}}\",\"username\":\"{{$randomUserName}}\",\"email\":\"{{$randomEmail}}\",\"password\":\"password123\",\"password_confirmation\":\"password123\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Generate credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Login', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\" Get New Registered User ID \", () => {",
									"  ",
									"  const{data} = pm.response.json();",
									"   pm.environment.set('v1Token', data.access_token);",
									" ",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"{{UserEmail}}\",\"password\":\"password123\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new company.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Create a new company', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\" Get New Registered User ID \", () => {",
									"  ",
									"  const{data} = pm.response.json();",
									"   pm.environment.set('CompanyID', data.id);",
									" ",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "voluptate",
									"type": "text"
								},
								{
									"key": "category",
									"value": "quo",
									"type": "text"
								},
								{
									"key": "country",
									"value": "nisi",
									"type": "text"
								},
								{
									"key": "languages[0]",
									"value": "perspiciatis",
									"type": "text"
								},
								{
									"key": "employees",
									"value": 1,
									"type": "text"
								},
								{
									"key": "about",
									"value": "corrupti",
									"type": "text"
								},
								{
									"key": "main_link",
									"value": "suscipit",
									"type": "text"
								},
								{
									"key": "avatar",
									"type": "file",
									"src": []
								},
								{
									"key": "banner",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/company",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"company"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new game.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Adding a new game', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\" Get New Registered User ID \", () => {",
									"const{data} = pm.response.json();",
									"   pm.environment.set('gameID', data.id);",
									"",
									"})",
									"pm.test(\" Message Successfully added \", () => {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.message).to.include(\"Successfully added\");",
									"",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "{{v1Token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "zpipnftnouuoubqqseddcygzolsshswdmptcxmjbqixmvxqjwcusepkpbsgcpkkbrsxekwjibglazvguhlzyupghr",
									"description": "Must not be greater than 255 characters.",
									"type": "text"
								},
								{
									"key": "category",
									"value": "rpg",
									"type": "text"
								},
								{
									"key": "description",
									"value": "nrmhzjhcbfiekznsgxouvzzmgramqjajiwjpodjvmgnsycgrhdrmjebxwehyskwgucjttemqxaadfacufillbgqupjewfcrzihqpckdotlkjqmsorehuxrxazgjaqoxkupsvkhrhohwcckbwvywovxxefsmwlyfoussgwimblwgxrceirkxaqcosadeusntzdzwlgqjwfqdogkbeozhirsrfndfbvvlosuownsnpbgrmnzrrkuyqeluzjjblmjeickmiuzsptpcnrzejpzrqkdmviimfpssuegchwbzjbuwohcsfkynuxrpsjditurutkjrrgyqeegmclzovpmvxtrqckcbcbvriyskggvrbwguhetybqvjzxbednylsctiztnsqewakpiitzxymljenfkjoigkrldvhjswphbupebsrlx",
									"description": "Must not be greater than 1000 characters.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "token",
									"value": "quia",
									"description": "Token used in the game",
									"type": "text",
									"disabled": true
								},
								{
									"key": "about",
									"value": "pdtqpnoqsmooapryvidpfhyygkumxwswajjrcyeyuztuvvwdlloawxtxzzzbgotfbzgrrsjckbajhdkkfcurbbakzqopwsqjtguihhncsibuzxdmtudnnuwqewndhaxpazfcxnrebkukibhqdutdnjkqcsjsrajpvtanvpytjktoldmhtgxzhfdyjgbfdxniytvtezxxadhshxngaaqvnkjfpfdildeutqevqqbdotfhtjemfrzrdekpsfmkqbnborqgmghnvjiatfejmpcgurjteiarlywcxbxwlxzraajmdxjyqfashnckkefldacoihyweodqeackvmzfsvyhyafsianntazrbhoshbpjcmhgqdwaykltaqppufyjceldslgxmgzalbocvajtcrrkhqsirhpvirmngmhvalovdtbrhdppkazpszuvwrrrzzssiwmdbvdhppdmbwrqpzeihrtvcosxmrqlodjvsdhnmunouiqenwfnybdmfbtbcmejddzsuliohwqjwocspfbvlcjhaeviytjjsxsmnvyhzgazjuphkjstxwjpkpqisytmlsmssdieghtlzmyrbdlsijqexdtulexddkfdojppzizzacltzzmgtttnlcpbsbzxfzgjlchaipftxmlzkbdzzsyacnioylmwzhkdkurygdbghyxmciqsjudgoqtumzdzdjbseepabzsxqateborrqutagcksnzzhkfwgysqfwtwxraeyxpzlnmiqouqihkknpunsqisszsbmxtigrbdpmzzlyacvytyhyqzsnhtpvoskjmiqbzmzpvamjwvbycgcuudpnwnlamnpwowubyevgcinmcjlnormi",
									"description": "Must not be greater than 1000 characters.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "country",
									"value": "US",
									"description": "Must be one of <code>PH</code>, <code>US</code>, <code>AF</code>, <code>AX</code>, <code>AL</code>, <code>DZ</code>, <code>AS</code>, <code>AD</code>, <code>AO</code>, <code>AI</code>, <code>AQ</code>, <code>AG</code>, <code>AR</code>, <code>AM</code>, <code>AW</code>, <code>AU</code>, <code>AT</code>, <code>AZ</code>, <code>BS</code>, <code>BH</code>, <code>BD</code>, <code>BB</code>, <code>BY</code>, <code>BE</code>, <code>BZ</code>, <code>BJ</code>, <code>BM</code>, <code>BT</code>, <code>BO</code>, <code>BQ</code>, <code>BA</code>, <code>BW</code>, <code>BV</code>, <code>BR</code>, <code>IO</code>, <code>BN</code>, <code>BG</code>, <code>BF</code>, <code>BI</code>, <code>KH</code>, <code>CM</code>, <code>CA</code>, <code>CV</code>, <code>KY</code>, <code>CF</code>, <code>TD</code>, <code>CL</code>, <code>CN</code>, <code>CX</code>, <code>CC</code>, <code>CO</code>, <code>KM</code>, <code>CG</code>, <code>CD</code>, <code>CK</code>, <code>CR</code>, <code>CI</code>, <code>HR</code>, <code>CU</code>, <code>CW</code>, <code>CY</code>, <code>CZ</code>, <code>DK</code>, <code>DJ</code>, <code>DM</code>, <code>DO</code>, <code>EC</code>, <code>EG</code>, <code>SV</code>, <code>GQ</code>, <code>ER</code>, <code>EE</code>, <code>ET</code>, <code>FK</code>, <code>FO</code>, <code>FJ</code>, <code>FI</code>, <code>FR</code>, <code>GF</code>, <code>PF</code>, <code>TF</code>, <code>GA</code>, <code>GM</code>, <code>GE</code>, <code>DE</code>, <code>GH</code>, <code>GI</code>, <code>GR</code>, <code>GL</code>, <code>GD</code>, <code>GP</code>, <code>GU</code>, <code>GT</code>, <code>GG</code>, <code>GN</code>, <code>GW</code>, <code>GY</code>, <code>HT</code>, <code>HM</code>, <code>VA</code>, <code>HN</code>, <code>HK</code>, <code>HU</code>, <code>IS</code>, <code>IN</code>, <code>ID</code>, <code>IR</code>, <code>IQ</code>, <code>IE</code>, <code>IM</code>, <code>IL</code>, <code>IT</code>, <code>JM</code>, <code>JP</code>, <code>JE</code>, <code>JO</code>, <code>KZ</code>, <code>KE</code>, <code>KI</code>, <code>KP</code>, <code>KR</code>, <code>KW</code>, <code>KG</code>, <code>LA</code>, <code>LV</code>, <code>LB</code>, <code>LS</code>, <code>LR</code>, <code>LY</code>, <code>LI</code>, <code>LT</code>, <code>LU</code>, <code>MO</code>, <code>MK</code>, <code>MG</code>, <code>MW</code>, <code>MY</code>, <code>MV</code>, <code>ML</code>, <code>MT</code>, <code>MH</code>, <code>MQ</code>, <code>MR</code>, <code>MU</code>, <code>YT</code>, <code>MX</code>, <code>FM</code>, <code>MD</code>, <code>MC</code>, <code>MN</code>, <code>ME</code>, <code>MS</code>, <code>MA</code>, <code>MZ</code>, <code>MM</code>, <code>NA</code>, <code>NR</code>, <code>NP</code>, <code>NL</code>, <code>NC</code>, <code>NZ</code>, <code>NI</code>, <code>NE</code>, <code>NG</code>, <code>NU</code>, <code>NF</code>, <code>MP</code>, <code>NO</code>, <code>OM</code>, <code>PK</code>, <code>PW</code>, <code>PS</code>, <code>PA</code>, <code>PG</code>, <code>PY</code>, <code>PE</code>, <code>PN</code>, <code>PL</code>, <code>PT</code>, <code>PR</code>, <code>QA</code>, <code>RE</code>, <code>RO</code>, <code>RU</code>, <code>RW</code>, <code>BL</code>, <code>SH</code>, <code>KN</code>, <code>LC</code>, <code>MF</code>, <code>PM</code>, <code>VC</code>, <code>WS</code>, <code>SM</code>, <code>ST</code>, <code>SA</code>, <code>SN</code>, <code>RS</code>, <code>SC</code>, <code>SL</code>, <code>SG</code>, <code>SX</code>, <code>SK</code>, <code>SI</code>, <code>SB</code>, <code>SO</code>, <code>ZA</code>, <code>GS</code>, <code>SS</code>, <code>ES</code>, <code>LK</code>, <code>SD</code>, <code>SR</code>, <code>SJ</code>, <code>SZ</code>, <code>SE</code>, <code>CH</code>, <code>SY</code>, <code>TW</code>, <code>TJ</code>, <code>TZ</code>, <code>TH</code>, <code>TL</code>, <code>TG</code>, <code>TK</code>, <code>TO</code>, <code>TT</code>, <code>TN</code>, <code>TR</code>, <code>TM</code>, <code>TC</code>, <code>TV</code>, <code>UG</code>, <code>UA</code>, <code>AE</code>, <code>GB</code>, <code>UM</code>, <code>UY</code>, <code>UZ</code>, <code>VU</code>, <code>VE</code>, <code>VN</code>, <code>VG</code>, <code>VI</code>, <code>WF</code>, <code>EH</code>, <code>YE</code>, <code>ZM</code>, or <code>ZW</code>.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "email",
									"value": "{{UserEmail}}",
									"description": "Must be a valid email address.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "company_id",
									"value": "{{CompanyID}}",
									"type": "text"
								},
								{
									"key": "release_date",
									"value": "2022-11-10",
									"description": "Must be a valid date. Must be a valid date in the format <code>Y-m-d</code>.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "blockchain_ids[0]",
									"value": "ut",
									"type": "text",
									"disabled": true
								},
								{
									"key": "main_link",
									"value": "soluta",
									"type": "text",
									"disabled": true
								},
								{
									"key": "status",
									"value": "repellendus",
									"type": "text",
									"disabled": true
								},
								{
									"key": "device_ids[0]",
									"value": "voluptatem",
									"type": "text",
									"disabled": true
								},
								{
									"key": "status_type",
									"value": "harum",
									"type": "text",
									"disabled": true
								},
								{
									"key": "nft_asset",
									"value": "labore",
									"type": "text"
								},
								{
									"key": "marketplace_link",
									"value": "ullam",
									"type": "text",
									"disabled": true
								},
								{
									"key": "avatar",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "banner",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "thumbnail",
									"type": "file",
									"src": []
								},
								{
									"key": "profile_picture",
									"type": "file",
									"src": []
								},
								{
									"key": "logo",
									"type": "file",
									"src": []
								},
								{
									"key": "cover_photo",
									"type": "file",
									"src": []
								},
								{
									"key": "Platforms",
									"value": "MAC",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/game",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"game"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a game.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Update a game', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\" Get New Game ID \", () => {",
									"const{data} = pm.response.json();",
									"   pm.environment.set('UpdateGameID', data.id);",
									"",
									"})",
									"pm.test(\" Message Successfully added \", () => {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.message).to.include(\"Successfully updated\");",
									"",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "{{v1Token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{$randomFirstName}}",
									"description": "Must not be greater than 255 characters.",
									"type": "text"
								},
								{
									"key": "code",
									"value": "code00112333",
									"description": "Must not be greater than 255 characters.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "category",
									"value": "ab",
									"type": "text"
								},
								{
									"key": "description",
									"value": "keep the game goodwsssd",
									"type": "text"
								},
								{
									"key": "token",
									"value": "rzxxjgpkquw",
									"description": "Must not be greater than 20 characters.",
									"type": "text"
								},
								{
									"key": "about",
									"value": "hpfyajgayjrsvcvhuurevnitdyktxojpfqezkvkellqpdffulnbausknbduijwujpdvmsavtlbvewphusjocgecbfxngpyfllimaieiikrllbygvyljowvvassicwamjyymzneaoauqbvyjpqvzexxkotbyeuxuuixxnyamfplldkawfoakpmmokkulmfomsqbqfvhotbfciiwzfxsisfiopjusdpvlqjatozxfdgqcohjakvdwctyfprhwsosytwcaxrktraplsvmfpcjtvpjpiqhubqwcjwbnpwgpwtvlwmpibshvdtzvjrlszmielgvlsktcjfhsjnqddcabrmsuhubotwrzopylieowarjvtulyegqqkbyuvbalqzwcbfldhqppbeyytryxjhserobrlogdswjhgbsjwifkcuyjqhewsweitwmpmjrpskrontwnpcugucljdzxyybwrtjzcqdlfxrrojgtijbmvrohdpuaxbquqsooaimslcawthsmwzdlfaqshokevwewiozgxqklilmbldfzxbfhnipmapgzzltrctnafrcbqwhkzkwbvfgijyvmhdqeibpqfjkgwkdhgcxwbpkkqosduwvfatqvczrfheryvbmabesuvpqvomtmykrrltmuypehttcjkrrjxkdkskybiqiiftsdjwctawyxltzofhozwbyzajywxwefespdmhxnexhuxtkkwfgmofiqxjbsdbvthdgvtopxkebejgauonqhwyyvlnrnkxnfudcxswdsjhoctvkxfpifjwbcglmcswzrbstdcwtpvonxacwbqbelxuahgygxavvopiqkbuguxvak",
									"description": "Must not be greater than 1000 characters.",
									"type": "text"
								},
								{
									"key": "game_data[0][field]",
									"value": "goulkzedprqblfccrepzsvknqxivungpygdosibnxbtyswadnong",
									"type": "text",
									"disabled": true
								},
								{
									"key": "slider[0][caption]",
									"value": "delectus",
									"type": "text",
									"disabled": true
								},
								{
									"key": "status",
									"value": "ipsum",
									"type": "text",
									"disabled": true
								},
								{
									"key": "blockchain_ids[0]",
									"value": "est",
									"type": "text",
									"disabled": true
								},
								{
									"key": "device_ids[0]",
									"value": "aut",
									"type": "text",
									"disabled": true
								},
								{
									"key": "main_link",
									"value": "est",
									"type": "text",
									"disabled": true
								},
								{
									"key": "status_type",
									"value": "nihil",
									"type": "text",
									"disabled": true
								},
								{
									"key": "nft_asset",
									"value": "quibusdam",
									"type": "text",
									"disabled": true
								},
								{
									"key": "marketplace_link",
									"value": "quam",
									"type": "text",
									"disabled": true
								},
								{
									"key": "avatar",
									"type": "file",
									"src": []
								},
								{
									"key": "banner",
									"type": "file",
									"src": []
								},
								{
									"key": "thumbnail",
									"type": "file",
									"src": []
								},
								{
									"key": "slider[][image]",
									"type": "file",
									"src": []
								},
								{
									"key": "company_id",
									"value": "{{CompanyID}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/game/{{gameID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"game",
								"{{gameID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List of all the games",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: List of all games', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v2/game",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"game"
							]
						},
						"description": "Get all games together with related game accounts, filterable by user and guild."
					},
					"response": []
				},
				{
					"name": "Get a game resource by ID.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Get a game resource by ID', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v2/game/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"game",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "The ID of the game."
								}
							]
						},
						"description": "Get specific game together with related game accounts."
					},
					"response": [
						{
							"name": "Untitled Example",
							"originalRequest": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{v1Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Bearer",
										"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/game/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"game",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "1",
											"description": "The ID of the game."
										}
									]
								},
								"description": "Get specific game together with related game accounts."
							},
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "cache-control",
									"value": "no-cache, private"
								},
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "access-control-allow-origin",
									"value": "*"
								}
							],
							"cookie": [],
							"body": "{\"Message\":\"You are not allowed for this api.\"}"
						}
					]
				},
				{
					"name": "Update a game. Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Update a game', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\" Get New Game ID \", () => {",
									"const{data} = pm.response.json();",
									"   pm.environment.set('UpdateGameID', data.id);",
									"",
									"})",
									"pm.test(\" Message Successfully added \", () => {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.message).to.include(\"Successfully updated\");",
									"",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "{{v1Token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{$randomFirstName}}",
									"description": "Must not be greater than 255 characters.",
									"type": "text"
								},
								{
									"key": "code",
									"value": "code00112333",
									"description": "Must not be greater than 255 characters.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "category",
									"value": "ab",
									"type": "text"
								},
								{
									"key": "description",
									"value": "keep the game goodwsssd",
									"type": "text"
								},
								{
									"key": "token",
									"value": "rzxxjgpkquw",
									"description": "Must not be greater than 20 characters.",
									"type": "text"
								},
								{
									"key": "about",
									"value": "hpfyajgayjrsvcvhuurevnitdyktxojpfqezkvkellqpdffulnbausknbduijwujpdvmsavtlbvewphusjocgecbfxngpyfllimaieiikrllbygvyljowvvassicwamjyymzneaoauqbvyjpqvzexxkotbyeuxuuixxnyamfplldkawfoakpmmokkulmfomsqbqfvhotbfciiwzfxsisfiopjusdpvlqjatozxfdgqcohjakvdwctyfprhwsosytwcaxrktraplsvmfpcjtvpjpiqhubqwcjwbnpwgpwtvlwmpibshvdtzvjrlszmielgvlsktcjfhsjnqddcabrmsuhubotwrzopylieowarjvtulyegqqkbyuvbalqzwcbfldhqppbeyytryxjhserobrlogdswjhgbsjwifkcuyjqhewsweitwmpmjrpskrontwnpcugucljdzxyybwrtjzcqdlfxrrojgtijbmvrohdpuaxbquqsooaimslcawthsmwzdlfaqshokevwewiozgxqklilmbldfzxbfhnipmapgzzltrctnafrcbqwhkzkwbvfgijyvmhdqeibpqfjkgwkdhgcxwbpkkqosduwvfatqvczrfheryvbmabesuvpqvomtmykrrltmuypehttcjkrrjxkdkskybiqiiftsdjwctawyxltzofhozwbyzajywxwefespdmhxnexhuxtkkwfgmofiqxjbsdbvthdgvtopxkebejgauonqhwyyvlnrnkxnfudcxswdsjhoctvkxfpifjwbcglmcswzrbstdcwtpvonxacwbqbelxuahgygxavvopiqkbuguxvak",
									"description": "Must not be greater than 1000 characters.",
									"type": "text"
								},
								{
									"key": "game_data[0][field]",
									"value": "goulkzedprqblfccrepzsvknqxivungpygdosibnxbtyswadnong",
									"type": "text",
									"disabled": true
								},
								{
									"key": "slider[0][caption]",
									"value": "delectus",
									"type": "text",
									"disabled": true
								},
								{
									"key": "status",
									"value": "ipsum",
									"type": "text",
									"disabled": true
								},
								{
									"key": "blockchain_ids[0]",
									"value": "est",
									"type": "text",
									"disabled": true
								},
								{
									"key": "device_ids[0]",
									"value": "aut",
									"type": "text",
									"disabled": true
								},
								{
									"key": "main_link",
									"value": "est",
									"type": "text",
									"disabled": true
								},
								{
									"key": "status_type",
									"value": "nihil",
									"type": "text",
									"disabled": true
								},
								{
									"key": "nft_asset",
									"value": "quibusdam",
									"type": "text",
									"disabled": true
								},
								{
									"key": "marketplace_link",
									"value": "quam",
									"type": "text",
									"disabled": true
								},
								{
									"key": "avatar",
									"type": "file",
									"src": []
								},
								{
									"key": "banner",
									"type": "file",
									"src": []
								},
								{
									"key": "thumbnail",
									"type": "file",
									"src": []
								},
								{
									"key": "slider[][image]",
									"type": "file",
									"src": []
								},
								{
									"key": "company_id",
									"value": "{{CompanyID}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/game/{{gameID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"game",
								"{{gameID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GameGenre Copy",
			"item": [
				{
					"name": "Get all of game genre.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Game Genre', function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v2/game-genre",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"game-genre"
							]
						}
					},
					"response": [
						{
							"name": "Untitled Example",
							"originalRequest": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{v1Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Bearer",
										"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/game-genre",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"game-genre"
									]
								}
							},
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "cache-control",
									"value": "no-cache, private"
								},
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "access-control-allow-origin",
									"value": "*"
								}
							],
							"cookie": [],
							"body": "{\"Message\":\"You are not allowed for this api.\"}"
						}
					]
				}
			]
		},
		{
			"name": "Company Copy",
			"item": [
				{
					"name": "Register a new user. Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Register a new user', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\" Get New Registered User ID \", () => {\r",
									"  \r",
									"  const{data} = pm.response.json();\r",
									"   pm.environment.set('NewUserRegID', data.id);\r",
									"   pm.environment.set('UserEmail', data.email);\r",
									"   \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"first_name\":\"{{$randomFirstName}}\",\"middle_name\":\"der\",\"last_name\":\"{{$randomLastName}}\",\"username\":\"{{$randomUserName}}\",\"email\":\"{{$randomEmail}}\",\"password\":\"password123\",\"password_confirmation\":\"password123\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Generate credentials. Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Login', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\" Get New Registered User ID \", () => {",
									"  ",
									"  const{data} = pm.response.json();",
									"   pm.environment.set('v1Token', data.access_token);",
									" ",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"{{UserEmail}}\",\"password\":\"password123\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new company.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Update a company', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\" Message Successfully added \", () => {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.message).to.include(\"Successfully added\");",
									"",
									"})",
									" pm.test('Get Fields', function() {",
									"    const{data} = pm.response.json();",
									"",
									"    pm.environment.set('CompAnyID', data.id);",
									"    pm.environment.set('CompAnyName', data.name);",
									"    pm.environment.set('CompanyEmployees', data.employees);",
									"    pm.environment.set('OwnerID', data.owner_id);",
									"    pm.environment.set('Category', data.category);",
									"    pm.environment.set('Country', data.country);",
									"",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{$randomLastName}}",
									"type": "text"
								},
								{
									"key": "category",
									"value": "quo",
									"type": "text"
								},
								{
									"key": "country",
									"value": "nisi",
									"type": "text"
								},
								{
									"key": "languages[0]",
									"value": "perspiciatis",
									"type": "text"
								},
								{
									"key": "employees",
									"value": 1,
									"type": "text"
								},
								{
									"key": "about",
									"value": "This company is {{$randomLastName}}",
									"type": "text"
								},
								{
									"key": "main_link",
									"value": "suscipit",
									"type": "text"
								},
								{
									"key": "avatar",
									"type": "file",
									"src": []
								},
								{
									"key": "banner",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/company",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"company"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get the company by ID.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Get the company bu ID', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\" Company ID \", () => {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.data.id).to.eql(pm.environment.get('CompAnyID'));",
									"",
									"})",
									"",
									"pm.test(\" Company Name \", () => {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.data.name).to.eql(pm.environment.get('CompAnyName'));",
									"  ",
									"})",
									"pm.test(\" Company Category \", () => {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.data.category).to.eql(pm.environment.get('Category'));",
									"  ",
									"})",
									"pm.test(\" Company Ownere ID \", () => {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.data.owner_id).to.eql(pm.environment.get('OwnerID'));",
									"  ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v2/company/{{CompAnyID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"company",
								"{{CompAnyID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a company.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Update a company', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "{{v1Token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{$randomCompanyName}}",
									"type": "text"
								},
								{
									"key": "category",
									"value": "repellendus11",
									"type": "text"
								},
								{
									"key": "country",
									"value": "deleniti",
									"type": "text"
								},
								{
									"key": "languages[0]",
									"value": "quasi",
									"type": "text",
									"disabled": true
								},
								{
									"key": "employees",
									"value": 9,
									"type": "text"
								},
								{
									"key": "about",
									"value": "utbb",
									"type": "text"
								},
								{
									"key": "main_link",
									"value": "impedit",
									"type": "text",
									"disabled": true
								},
								{
									"key": "slug",
									"value": "",
									"description": "Must not be greater than 255 characters.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "avatar",
									"type": "file",
									"src": []
								},
								{
									"key": "banner",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/company/{{CompAnyID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"company",
								"{{CompAnyID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all of company.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Create a new company', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v2/company",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"company"
							]
						}
					},
					"response": [
						{
							"name": "Untitled Example",
							"originalRequest": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{v1Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Bearer",
										"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/company",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"company"
									]
								}
							},
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "cache-control",
									"value": "no-cache, private"
								},
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "access-control-allow-origin",
									"value": "*"
								}
							],
							"cookie": [],
							"body": "{\"Message\":\"You are not allowed for this api.\"}"
						}
					]
				},
				{
					"name": "Delete a company.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Delete a company', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v2/company/{{CompAnyID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"company",
								"{{CompAnyID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Service Copy",
			"item": [
				{
					"name": "Register a new user. Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Register a new user', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\" Get New Registered User ID \", () => {\r",
									"  \r",
									"  const{data} = pm.response.json();\r",
									"   pm.environment.set('NewUserRegID', data.id);\r",
									"   pm.environment.set('UserEmail', data.email);\r",
									"   pm.environment.set('PosterID',data.id);\r",
									"   \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"first_name\":\"{{$randomFirstName}}\",\"middle_name\":\"der\",\"last_name\":\"{{$randomLastName}}\",\"username\":\"{{$randomUserName}}\",\"email\":\"{{$randomEmail}}\",\"password\":\"password123\",\"password_confirmation\":\"password123\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Generate credentials. Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Login', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\" Get New Registered User ID \", () => {",
									"  ",
									"  const{data} = pm.response.json();",
									"   pm.environment.set('v1Token', data.access_token);",
									" ",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"{{UserEmail}}\",\"password\":\"password123\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new service.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Create a new service.', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\" Get Service ID & Service Slug \", () => {",
									"  ",
									"  const{data} = pm.response.json();",
									"   pm.environment.set('ServiceID', data.id);",
									" ",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"title\":\"{{$randomJobTitle}}\",\"short_title\":\"porro\",\"poster_type\":\"user\",\"poster_id\":{{PosterID}},\"description\":\"dolore\",\"status\":1,\"service_price\":9,\"delivery_amount\":5,\"service_currency\":\"php\",\"service_unit\":\"quod\",\"delivery_unit\":\"enim\",\"tags\":\"porro\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/service",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"service"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a service.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Update a service', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\" Get Service Slug \", () => {",
									"  ",
									"  const{data} = pm.response.json();",
									"   pm.environment.set('ServiceSlug', data.slug);",
									" ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"title\":\"{{$randomJobTitle}}\",\"short_title\":\"ut\",\"poster_type\":\"user\",\"poster_id\":{{PosterID}},\"description\":\"ab\",\"status\":1,\"service_price\":5,\"delivery_amount\":5,\"service_currency\":\"odit\",\"service_unit\":\"repellat\",\"delivery_unit\":\"nesciunt\",\"tags\":\"quisquam\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/service/{{ServiceID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"service",
								"{{ServiceID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a services resource by Slug",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Get a services resource by Slug', function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "{{v1Token}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v2/service/slug/{{ServiceSlug}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"service",
								"slug",
								"{{ServiceSlug}}"
							]
						}
					},
					"response": [
						{
							"name": "Untitled Example",
							"originalRequest": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{v1Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Bearer",
										"value": "{{v1Token}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/service/slug/{{ServiceSlug}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"service",
										"slug",
										"{{ServiceSlug}}"
									]
								}
							},
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "cache-control",
									"value": "no-cache, private"
								},
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "access-control-allow-origin",
									"value": "*"
								}
							],
							"cookie": [],
							"body": "{\"Message\":\"You are not allowed for this api.\"}"
						}
					]
				},
				{
					"name": "Get the service by ID.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Get the service by ID.', function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v2/service/{{ServiceID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"service",
								"{{ServiceID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all of service.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Get all of service.', function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v2/service",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"service"
							]
						}
					},
					"response": [
						{
							"name": "Untitled Example",
							"originalRequest": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{v1Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Bearer",
										"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/service",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"service"
									]
								}
							},
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "cache-control",
									"value": "no-cache, private"
								},
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "access-control-allow-origin",
									"value": "*"
								}
							],
							"cookie": [],
							"body": "{\"Message\":\"You are not allowed for this api.\"}"
						}
					]
				},
				{
					"name": "Delete a service.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Delete a service', function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v2/service/{{ServiceID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"service",
								"{{ServiceID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Game Post Copy",
			"item": [
				{
					"name": "Register a new user.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Register a new user', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\" Get New Registered User ID \", () => {\r",
									"  \r",
									"  const{data} = pm.response.json();\r",
									"   pm.environment.set('NewUserRegID', data.id);\r",
									"   pm.environment.set('UserEmail', data.email);\r",
									"   \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"first_name\":\"{{$randomFirstName}}\",\"middle_name\":\"der\",\"last_name\":\"{{$randomLastName}}\",\"username\":\"{{$randomUserName}}\",\"email\":\"{{$randomEmail}}\",\"password\":\"password123\",\"password_confirmation\":\"password123\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Generate credentials.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Login', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\" Get New Registered User ID \", () => {",
									"  ",
									"  const{data} = pm.response.json();",
									"   pm.environment.set('v1Token', data.access_token);",
									" ",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"{{UserEmail}}\",\"password\":\"password123\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new company",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Create a new company', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\" Get New Registered User ID \", () => {",
									"  ",
									"  const{data} = pm.response.json();",
									"   pm.environment.set('CompanyID', data.id);",
									" ",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "voluptate",
									"type": "text"
								},
								{
									"key": "category",
									"value": "quo",
									"type": "text"
								},
								{
									"key": "country",
									"value": "nisi",
									"type": "text"
								},
								{
									"key": "languages[0]",
									"value": "perspiciatis",
									"type": "text"
								},
								{
									"key": "employees",
									"value": 1,
									"type": "text"
								},
								{
									"key": "about",
									"value": "corrupti",
									"type": "text"
								},
								{
									"key": "main_link",
									"value": "suscipit",
									"type": "text"
								},
								{
									"key": "avatar",
									"type": "file",
									"src": []
								},
								{
									"key": "banner",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/company",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"company"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new game",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Adding a new game', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\" Get New Registered User ID \", () => {",
									"  ",
									"  const{data} = pm.response.json();",
									"   pm.environment.set('gameID', data.id);",
									" ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "{{v1Token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "zpipnftnouuoubqqseddcygzolsshswdmptcxmjbqixmvxqjwcusepkpbsgcpkkbrsxekwjibglazvguhlzyupghr",
									"description": "Must not be greater than 255 characters.",
									"type": "text"
								},
								{
									"key": "category",
									"value": "rpg",
									"type": "text"
								},
								{
									"key": "description",
									"value": "nrmhzjhcbfiekznsgxouvzzmgramqjajiwjpodjvmgnsycgrhdrmjebxwehyskwgucjttemqxaadfacufillbgqupjewfcrzihqpckdotlkjqmsorehuxrxazgjaqoxkupsvkhrhohwcckbwvywovxxefsmwlyfoussgwimblwgxrceirkxaqcosadeusntzdzwlgqjwfqdogkbeozhirsrfndfbvvlosuownsnpbgrmnzrrkuyqeluzjjblmjeickmiuzsptpcnrzejpzrqkdmviimfpssuegchwbzjbuwohcsfkynuxrpsjditurutkjrrgyqeegmclzovpmvxtrqckcbcbvriyskggvrbwguhetybqvjzxbednylsctiztnsqewakpiitzxymljenfkjoigkrldvhjswphbupebsrlx",
									"description": "Must not be greater than 1000 characters.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "token",
									"value": "quia",
									"description": "Token used in the game",
									"type": "text",
									"disabled": true
								},
								{
									"key": "about",
									"value": "pdtqpnoqsmooapryvidpfhyygkumxwswajjrcyeyuztuvvwdlloawxtxzzzbgotfbzgrrsjckbajhdkkfcurbbakzqopwsqjtguihhncsibuzxdmtudnnuwqewndhaxpazfcxnrebkukibhqdutdnjkqcsjsrajpvtanvpytjktoldmhtgxzhfdyjgbfdxniytvtezxxadhshxngaaqvnkjfpfdildeutqevqqbdotfhtjemfrzrdekpsfmkqbnborqgmghnvjiatfejmpcgurjteiarlywcxbxwlxzraajmdxjyqfashnckkefldacoihyweodqeackvmzfsvyhyafsianntazrbhoshbpjcmhgqdwaykltaqppufyjceldslgxmgzalbocvajtcrrkhqsirhpvirmngmhvalovdtbrhdppkazpszuvwrrrzzssiwmdbvdhppdmbwrqpzeihrtvcosxmrqlodjvsdhnmunouiqenwfnybdmfbtbcmejddzsuliohwqjwocspfbvlcjhaeviytjjsxsmnvyhzgazjuphkjstxwjpkpqisytmlsmssdieghtlzmyrbdlsijqexdtulexddkfdojppzizzacltzzmgtttnlcpbsbzxfzgjlchaipftxmlzkbdzzsyacnioylmwzhkdkurygdbghyxmciqsjudgoqtumzdzdjbseepabzsxqateborrqutagcksnzzhkfwgysqfwtwxraeyxpzlnmiqouqihkknpunsqisszsbmxtigrbdpmzzlyacvytyhyqzsnhtpvoskjmiqbzmzpvamjwvbycgcuudpnwnlamnpwowubyevgcinmcjlnormi",
									"description": "Must not be greater than 1000 characters.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "country",
									"value": "US",
									"description": "Must be one of <code>PH</code>, <code>US</code>, <code>AF</code>, <code>AX</code>, <code>AL</code>, <code>DZ</code>, <code>AS</code>, <code>AD</code>, <code>AO</code>, <code>AI</code>, <code>AQ</code>, <code>AG</code>, <code>AR</code>, <code>AM</code>, <code>AW</code>, <code>AU</code>, <code>AT</code>, <code>AZ</code>, <code>BS</code>, <code>BH</code>, <code>BD</code>, <code>BB</code>, <code>BY</code>, <code>BE</code>, <code>BZ</code>, <code>BJ</code>, <code>BM</code>, <code>BT</code>, <code>BO</code>, <code>BQ</code>, <code>BA</code>, <code>BW</code>, <code>BV</code>, <code>BR</code>, <code>IO</code>, <code>BN</code>, <code>BG</code>, <code>BF</code>, <code>BI</code>, <code>KH</code>, <code>CM</code>, <code>CA</code>, <code>CV</code>, <code>KY</code>, <code>CF</code>, <code>TD</code>, <code>CL</code>, <code>CN</code>, <code>CX</code>, <code>CC</code>, <code>CO</code>, <code>KM</code>, <code>CG</code>, <code>CD</code>, <code>CK</code>, <code>CR</code>, <code>CI</code>, <code>HR</code>, <code>CU</code>, <code>CW</code>, <code>CY</code>, <code>CZ</code>, <code>DK</code>, <code>DJ</code>, <code>DM</code>, <code>DO</code>, <code>EC</code>, <code>EG</code>, <code>SV</code>, <code>GQ</code>, <code>ER</code>, <code>EE</code>, <code>ET</code>, <code>FK</code>, <code>FO</code>, <code>FJ</code>, <code>FI</code>, <code>FR</code>, <code>GF</code>, <code>PF</code>, <code>TF</code>, <code>GA</code>, <code>GM</code>, <code>GE</code>, <code>DE</code>, <code>GH</code>, <code>GI</code>, <code>GR</code>, <code>GL</code>, <code>GD</code>, <code>GP</code>, <code>GU</code>, <code>GT</code>, <code>GG</code>, <code>GN</code>, <code>GW</code>, <code>GY</code>, <code>HT</code>, <code>HM</code>, <code>VA</code>, <code>HN</code>, <code>HK</code>, <code>HU</code>, <code>IS</code>, <code>IN</code>, <code>ID</code>, <code>IR</code>, <code>IQ</code>, <code>IE</code>, <code>IM</code>, <code>IL</code>, <code>IT</code>, <code>JM</code>, <code>JP</code>, <code>JE</code>, <code>JO</code>, <code>KZ</code>, <code>KE</code>, <code>KI</code>, <code>KP</code>, <code>KR</code>, <code>KW</code>, <code>KG</code>, <code>LA</code>, <code>LV</code>, <code>LB</code>, <code>LS</code>, <code>LR</code>, <code>LY</code>, <code>LI</code>, <code>LT</code>, <code>LU</code>, <code>MO</code>, <code>MK</code>, <code>MG</code>, <code>MW</code>, <code>MY</code>, <code>MV</code>, <code>ML</code>, <code>MT</code>, <code>MH</code>, <code>MQ</code>, <code>MR</code>, <code>MU</code>, <code>YT</code>, <code>MX</code>, <code>FM</code>, <code>MD</code>, <code>MC</code>, <code>MN</code>, <code>ME</code>, <code>MS</code>, <code>MA</code>, <code>MZ</code>, <code>MM</code>, <code>NA</code>, <code>NR</code>, <code>NP</code>, <code>NL</code>, <code>NC</code>, <code>NZ</code>, <code>NI</code>, <code>NE</code>, <code>NG</code>, <code>NU</code>, <code>NF</code>, <code>MP</code>, <code>NO</code>, <code>OM</code>, <code>PK</code>, <code>PW</code>, <code>PS</code>, <code>PA</code>, <code>PG</code>, <code>PY</code>, <code>PE</code>, <code>PN</code>, <code>PL</code>, <code>PT</code>, <code>PR</code>, <code>QA</code>, <code>RE</code>, <code>RO</code>, <code>RU</code>, <code>RW</code>, <code>BL</code>, <code>SH</code>, <code>KN</code>, <code>LC</code>, <code>MF</code>, <code>PM</code>, <code>VC</code>, <code>WS</code>, <code>SM</code>, <code>ST</code>, <code>SA</code>, <code>SN</code>, <code>RS</code>, <code>SC</code>, <code>SL</code>, <code>SG</code>, <code>SX</code>, <code>SK</code>, <code>SI</code>, <code>SB</code>, <code>SO</code>, <code>ZA</code>, <code>GS</code>, <code>SS</code>, <code>ES</code>, <code>LK</code>, <code>SD</code>, <code>SR</code>, <code>SJ</code>, <code>SZ</code>, <code>SE</code>, <code>CH</code>, <code>SY</code>, <code>TW</code>, <code>TJ</code>, <code>TZ</code>, <code>TH</code>, <code>TL</code>, <code>TG</code>, <code>TK</code>, <code>TO</code>, <code>TT</code>, <code>TN</code>, <code>TR</code>, <code>TM</code>, <code>TC</code>, <code>TV</code>, <code>UG</code>, <code>UA</code>, <code>AE</code>, <code>GB</code>, <code>UM</code>, <code>UY</code>, <code>UZ</code>, <code>VU</code>, <code>VE</code>, <code>VN</code>, <code>VG</code>, <code>VI</code>, <code>WF</code>, <code>EH</code>, <code>YE</code>, <code>ZM</code>, or <code>ZW</code>.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "email",
									"value": "{{UserEmail}}",
									"description": "Must be a valid email address.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "company_id",
									"value": "{{CompanyID}}",
									"type": "text"
								},
								{
									"key": "release_date",
									"value": "2022-11-10",
									"description": "Must be a valid date. Must be a valid date in the format <code>Y-m-d</code>.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "blockchain_ids[0]",
									"value": "ut",
									"type": "text",
									"disabled": true
								},
								{
									"key": "main_link",
									"value": "soluta",
									"type": "text",
									"disabled": true
								},
								{
									"key": "status",
									"value": "repellendus",
									"type": "text",
									"disabled": true
								},
								{
									"key": "device_ids[0]",
									"value": "voluptatem",
									"type": "text",
									"disabled": true
								},
								{
									"key": "status_type",
									"value": "harum",
									"type": "text",
									"disabled": true
								},
								{
									"key": "nft_asset",
									"value": "labore",
									"type": "text"
								},
								{
									"key": "marketplace_link",
									"value": "ullam",
									"type": "text",
									"disabled": true
								},
								{
									"key": "avatar",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "banner",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "thumbnail",
									"type": "file",
									"src": []
								},
								{
									"key": "profile_picture",
									"type": "file",
									"src": []
								},
								{
									"key": "logo",
									"type": "file",
									"src": []
								},
								{
									"key": "cover_photo",
									"type": "file",
									"src": []
								},
								{
									"key": "Platforms",
									"value": "MAC",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/game",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"game"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new game post.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Create a Game Post', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\" Create game post ID \", () => {",
									"  ",
									"  const{data} = pm.response.json();",
									"   pm.environment.set('gamepostID', data.id);",
									" ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "title",
									"value": "{{$randomFirstName}}",
									"description": "Must not be greater than 255 characters.",
									"type": "text"
								},
								{
									"key": "subtitle",
									"value": "sampleee",
									"description": "Must not be greater than 500 characters.",
									"type": "text"
								},
								{
									"key": "game_id",
									"value": "{{gameID}}",
									"type": "text"
								},
								{
									"key": "data",
									"value": "et",
									"type": "text"
								},
								{
									"key": "image",
									"type": "file",
									"src": []
								},
								{
									"key": "header_images[][image]",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/game-post",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"game-post"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a game post.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Update a game post', function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "title",
									"value": "{{$randomLastName}}",
									"description": "Must not be greater than 255 characters.",
									"type": "text"
								},
								{
									"key": "subtitle",
									"value": "ndtgjzcrucelxrcfacmsnqoztzdfjlziolirhokipfopyupextajjjrbrbsdqfsvhqrojiizpzuoljnhorirqqixdtyhlumcbxophblzxmxtimqcduqkhwarjckwqhlnrrldxyduepkyqyrqznjtilsdymelopwtcomoliftevpbnoyxxhobmgoxteiynhdeuphcbmqpjdwvkdjhqixelvezhjsqwpyammqxuhchmzepeaqnwuqkgpjsjwvlmhkdaetupwjiafnglzvoafmijfkxzljcbhuimqcaugycoafbqukpqbyxmrwkgjxguqabtxlakkhdswziwssqoevcyhkvicwkujkmthwcmspmpsvosuqknyrmqqirheptftgbvkxcvlvwkmqzhwixhmtnruhsowmuphwfspwtvkquybvssduuysrrwczbvqveyijegoyoaalzgfvzohdqqmnhqyollksprr",
									"description": "Must not be greater than 500 characters.",
									"type": "text"
								},
								{
									"key": "data",
									"value": "aut",
									"type": "text"
								},
								{
									"key": "image",
									"type": "file",
									"src": []
								},
								{
									"key": "header_images[][image]",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/game-post/{{gamepostID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"game-post",
								"{{gamepostID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all of game post.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Get all of game post', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\" Get slug \", () => {",
									"  ",
									"  const{data} = pm.response.json();",
									"   pm.environment.set('GameSlug', data.game_posts[3].slug);",
									" ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v2/game-post",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"game-post"
							]
						}
					},
					"response": [
						{
							"name": "Untitled Example",
							"originalRequest": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{v1Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Bearer",
										"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/game-post",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"game-post"
									]
								}
							},
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "cache-control",
									"value": "no-cache, private"
								},
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "access-control-allow-origin",
									"value": "*"
								}
							],
							"cookie": [],
							"body": "{\"Message\":\"You are not allowed for this api.\"}"
						}
					]
				},
				{
					"name": "Get a game post resource by Slug",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Get a game post resource by Slug', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v2/game-post/slug/{{GameSlug}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"game-post",
								"slug",
								"{{GameSlug}}"
							]
						}
					},
					"response": [
						{
							"name": "Untitled Example",
							"originalRequest": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{v1Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Bearer",
										"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/game-post/slug/{{GameSlug}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"game-post",
										"slug",
										"{{GameSlug}}"
									]
								}
							},
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "cache-control",
									"value": "no-cache, private"
								},
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "access-control-allow-origin",
									"value": "*"
								}
							],
							"cookie": [],
							"body": "{\"Message\":\"You are not allowed for this api.\"}"
						}
					]
				}
			]
		},
		{
			"name": "Guilds Copy",
			"item": [
				{
					"name": "Register a new user. Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Register a new user', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\" Get New Registered User ID \", () => {\r",
									"  \r",
									"  const{data} = pm.response.json();\r",
									"   pm.environment.set('NewUserRegID', data.id);\r",
									"   pm.environment.set('UserEmail', data.email);\r",
									"   \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"first_name\":\"{{$randomFirstName}}\",\"middle_name\":\"der\",\"last_name\":\"{{$randomLastName}}\",\"username\":\"{{$randomUserName}}\",\"email\":\"{{$randomEmail}}\",\"password\":\"password123\",\"password_confirmation\":\"password123\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Generate credentials. Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Login', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\" Get New Registered User ID \", () => {",
									"  ",
									"  const{data} = pm.response.json();",
									"   pm.environment.set('v1Token', data.access_token);",
									" ",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"{{UserEmail}}\",\"password\":\"password123\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new guild.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Create a new company', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\" Get New Registered User ID \", () => {",
									"  ",
									"  const{data} = pm.response.json();",
									"   pm.environment.set('GuildID', data.id);",
									"   pm.environment.set('GuildSlug', data.slug)",
									" ",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "{{$randomEmail}}",
									"description": "Must be a valid email address. The value format is invalid.",
									"type": "text"
								},
								{
									"key": "name",
									"value": "{{$randomFirstName}}",
									"description": "Must not be greater than 100 characters.",
									"type": "text"
								},
								{
									"key": "description",
									"value": "jkfnrgawinujrsybxfefxnzkihtcxdxoksducgwpixopzfqnsqnmbglmpbhjiadrsprfictofdayjmyoxjcitpsagkjzkebhhboqtyxzqwzsmsmosauhuijykoaheiegvkuxofmglruqibwvputjflnjmarbdriggvupuiilhdgdmsyaktsiqlzgxffdwmqinfrxaypcbajbnsrvifdworxhfphvyrtxuqvcivvlqzadyhmxwpgcgoktuefvjtldgffwtujtubpycghijyztiybfremvygopqsguynigstmaahrbecgwctycvqnwneoiqpdxdlyzuejgqalmwyqwssbjbumdzyrldbxnruhvuehhybwllzmmlzefbgldnrewepxcfhnthgjdqxugnnpduniasazbxiictyuosohqgtmnbshhlinbezuxodkkuomkiyvgwovtmdryswsfffraldzqfbddkhydynznddzdwfemrlozszboxtzjjuxfwlarwmrcppqjkoxodoopijlzttouzykbrnoybqdfyaixtwkauiqmhcrfjxurdmfiu",
									"description": "Must not be greater than 1000 characters.",
									"type": "text"
								},
								{
									"key": "about",
									"value": "grfcwvuxeuuatewsiehtodbzlyifrgcvfylgidblwmtcfoxlbbmusftnuqisaymrvrnpkkplicifpkrpqfxcxhtncelxukgiqsjtbsdfikhfxalcscnolnyzdrdxkmlqtzggvmvpnszjtreynbggaztbfbvtogtfdmvfyyrqevngmfvqxxfcopjbhzzqkmkapfeedokbzqafxtgflmzzxpopvwegtaivkvfgcbpgekxqmaixdvxsujrfhjyydfjllfedjrbabbckcnnnfxygysquopqyvywepbdnnokvpniqzkwbltwvoaafrtzdkemwokbtdbkeyijdoigjmkqzvpqsksiqqjaclqzuhouukwtqacylvojapdhzrdsckqxapxcegedgzercuvxivmpqoklqfqczmxrksxisqaywkyhjanrkhsuwcjcdhwpaxsxrhnzawhbssevqksmxqgvxymkgwhmsgqrroeutpwzxwdwawnsdngkqsizsfavacojxstdnlfxxpbkwvydczfikvvpcovczsxsjbgsktpxyhvcluoyudusfegphifxcgsmntzcjhzmcvzclehrzhhnxyccuymjarofzouxcneowcckvr",
									"description": "Must not be greater than 1000 characters.",
									"type": "text"
								},
								{
									"key": "partner",
									"value": 1,
									"type": "text"
								},
								{
									"key": "social_media[0]",
									"value": "rerum",
									"type": "text"
								},
								{
									"key": "country",
									"value": "exercitationem",
									"type": "text"
								},
								{
									"key": "player_rewards",
									"value": "temporibus",
									"type": "text"
								},
								{
									"key": "logo",
									"type": "file",
									"src": []
								},
								{
									"key": "banner",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/guild",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"guild"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a guild.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Update a guild', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\" Get New Registered User ID \", () => {",
									"  ",
									"  const{data} = pm.response.json();",
									"   pm.environment.set('UpGuildID', data.id);",
									" ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "{{$randomEmail}}",
									"description": "Must be a valid email address. The value format is invalid.",
									"type": "text"
								},
								{
									"key": "name",
									"value": "{{$randomFirstName}}",
									"description": "Must not be greater than 100 characters.",
									"type": "text"
								},
								{
									"key": "description",
									"value": "uxxijhkkcyltglbmovwopbhkbtwrxzkfcodwdsxazcubmtywntftyzpgftklpaxblhphrrfjhsbkkdobqrbsnxsjibmnqckgdsbayqmvtfagxnwigwjbekxvwpaesktyvjkpqwuxvrglfwuxgvvggrlnfrnnzpvqinoyanekclsfngtcqocljszcevzungofvmmzhdjnegchokvmcafsytmqelxoifjzwuapxmjjfqrtjstzhieqtdernefwkilplelyltifaviomnufpgvmgpxsbbbqcgsnjahdzniiuvtfcuvrfxsfhjrfwfftqtdhldawdazvgysqisejgitcjssrzivzkxkffwymmghqcdhcoxnyqfslkuszeifoqcvcoujmfuiwmgoaygeoopwmbgictrghszklycpxzdgtzfkysohbirhacvanzegzngqlxajlnscrcrebgfcxjzqlqevfbyuseugelajqbddzsxfwtevzyoejfjfennkzejpqnzjsfyoxlvvixaggivmmozzrgdzlftuhctsbmunboigoxzoruptbpaezglpwhspsmiczqrezdxkgvfewvbjlwlummiyjpbtzmuaakvlxgemtdodqjknmxhdabhaekazcjqzpnyrflosfyyerjdznleoltaueoequlserkmozxomfhjazfgeflpaliwmtpjkxdoowgrbvtmfxwsoinaafrcsykmofypbjnlhlcagmgikdcmvkskrbxmmfermqoaxnawqbczjqfgeocfuwjkjdwosojdbxksdgorclbguzawwylkopxxxneilpyonoqatgmuwrnskbdjfyqaosuczhbtvuoabcmxniejdsfkpjksccesauffutyycxnqbslogsfpa",
									"description": "Must not be greater than 1000 characters.",
									"type": "text"
								},
								{
									"key": "about",
									"value": "lbaxmrfoegfkijlxlbjtqmquxumwhskibxopcxyhiowtyirnworlvpnzyntsznzprbixuiamxyljpbsoiaosdzxghwklwqaufkretrwkjtvdxcnaxlksdsyvegvlptnetjanxckdsdbschlwpppwwwkorrqyjkjimkxhyhkamoxkzlyfxrfkkwlqsmzjcvwgeocjkonupapcnjhjyjmjctlhvkovlmfywvcbdwvillceheycrjkgjwktjwpruopuwpzceywfafpdriistmcrydquzcdgxnogqkaqvzhgzyltztnizqfjmqwqukvsapjysmdusjdeyltcqwvegzdcywoshxasnvpxagsxa",
									"description": "Must not be greater than 1000 characters.",
									"type": "text"
								},
								{
									"key": "partner",
									"value": 3,
									"type": "text"
								},
								{
									"key": "social_media[0]",
									"value": "aut",
									"type": "text"
								},
								{
									"key": "country",
									"value": "GB",
									"description": "Must be one of <code>PH</code>, <code>US</code>, <code>AF</code>, <code>AX</code>, <code>AL</code>, <code>DZ</code>, <code>AS</code>, <code>AD</code>, <code>AO</code>, <code>AI</code>, <code>AQ</code>, <code>AG</code>, <code>AR</code>, <code>AM</code>, <code>AW</code>, <code>AU</code>, <code>AT</code>, <code>AZ</code>, <code>BS</code>, <code>BH</code>, <code>BD</code>, <code>BB</code>, <code>BY</code>, <code>BE</code>, <code>BZ</code>, <code>BJ</code>, <code>BM</code>, <code>BT</code>, <code>BO</code>, <code>BQ</code>, <code>BA</code>, <code>BW</code>, <code>BV</code>, <code>BR</code>, <code>IO</code>, <code>BN</code>, <code>BG</code>, <code>BF</code>, <code>BI</code>, <code>KH</code>, <code>CM</code>, <code>CA</code>, <code>CV</code>, <code>KY</code>, <code>CF</code>, <code>TD</code>, <code>CL</code>, <code>CN</code>, <code>CX</code>, <code>CC</code>, <code>CO</code>, <code>KM</code>, <code>CG</code>, <code>CD</code>, <code>CK</code>, <code>CR</code>, <code>CI</code>, <code>HR</code>, <code>CU</code>, <code>CW</code>, <code>CY</code>, <code>CZ</code>, <code>DK</code>, <code>DJ</code>, <code>DM</code>, <code>DO</code>, <code>EC</code>, <code>EG</code>, <code>SV</code>, <code>GQ</code>, <code>ER</code>, <code>EE</code>, <code>ET</code>, <code>FK</code>, <code>FO</code>, <code>FJ</code>, <code>FI</code>, <code>FR</code>, <code>GF</code>, <code>PF</code>, <code>TF</code>, <code>GA</code>, <code>GM</code>, <code>GE</code>, <code>DE</code>, <code>GH</code>, <code>GI</code>, <code>GR</code>, <code>GL</code>, <code>GD</code>, <code>GP</code>, <code>GU</code>, <code>GT</code>, <code>GG</code>, <code>GN</code>, <code>GW</code>, <code>GY</code>, <code>HT</code>, <code>HM</code>, <code>VA</code>, <code>HN</code>, <code>HK</code>, <code>HU</code>, <code>IS</code>, <code>IN</code>, <code>ID</code>, <code>IR</code>, <code>IQ</code>, <code>IE</code>, <code>IM</code>, <code>IL</code>, <code>IT</code>, <code>JM</code>, <code>JP</code>, <code>JE</code>, <code>JO</code>, <code>KZ</code>, <code>KE</code>, <code>KI</code>, <code>KP</code>, <code>KR</code>, <code>KW</code>, <code>KG</code>, <code>LA</code>, <code>LV</code>, <code>LB</code>, <code>LS</code>, <code>LR</code>, <code>LY</code>, <code>LI</code>, <code>LT</code>, <code>LU</code>, <code>MO</code>, <code>MK</code>, <code>MG</code>, <code>MW</code>, <code>MY</code>, <code>MV</code>, <code>ML</code>, <code>MT</code>, <code>MH</code>, <code>MQ</code>, <code>MR</code>, <code>MU</code>, <code>YT</code>, <code>MX</code>, <code>FM</code>, <code>MD</code>, <code>MC</code>, <code>MN</code>, <code>ME</code>, <code>MS</code>, <code>MA</code>, <code>MZ</code>, <code>MM</code>, <code>NA</code>, <code>NR</code>, <code>NP</code>, <code>NL</code>, <code>NC</code>, <code>NZ</code>, <code>NI</code>, <code>NE</code>, <code>NG</code>, <code>NU</code>, <code>NF</code>, <code>MP</code>, <code>NO</code>, <code>OM</code>, <code>PK</code>, <code>PW</code>, <code>PS</code>, <code>PA</code>, <code>PG</code>, <code>PY</code>, <code>PE</code>, <code>PN</code>, <code>PL</code>, <code>PT</code>, <code>PR</code>, <code>QA</code>, <code>RE</code>, <code>RO</code>, <code>RU</code>, <code>RW</code>, <code>BL</code>, <code>SH</code>, <code>KN</code>, <code>LC</code>, <code>MF</code>, <code>PM</code>, <code>VC</code>, <code>WS</code>, <code>SM</code>, <code>ST</code>, <code>SA</code>, <code>SN</code>, <code>RS</code>, <code>SC</code>, <code>SL</code>, <code>SG</code>, <code>SX</code>, <code>SK</code>, <code>SI</code>, <code>SB</code>, <code>SO</code>, <code>ZA</code>, <code>GS</code>, <code>SS</code>, <code>ES</code>, <code>LK</code>, <code>SD</code>, <code>SR</code>, <code>SJ</code>, <code>SZ</code>, <code>SE</code>, <code>CH</code>, <code>SY</code>, <code>TW</code>, <code>TJ</code>, <code>TZ</code>, <code>TH</code>, <code>TL</code>, <code>TG</code>, <code>TK</code>, <code>TO</code>, <code>TT</code>, <code>TN</code>, <code>TR</code>, <code>TM</code>, <code>TC</code>, <code>TV</code>, <code>UG</code>, <code>UA</code>, <code>AE</code>, <code>GB</code>, <code>UM</code>, <code>UY</code>, <code>UZ</code>, <code>VU</code>, <code>VE</code>, <code>VN</code>, <code>VG</code>, <code>VI</code>, <code>WF</code>, <code>EH</code>, <code>YE</code>, <code>ZM</code>, or <code>ZW</code>.",
									"type": "text"
								},
								{
									"key": "player_rewards",
									"value": "vel",
									"type": "text"
								},
								{
									"key": "logo",
									"type": "file",
									"src": []
								},
								{
									"key": "banner",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/guild/{{GuildID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"guild",
								"{{GuildID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all guilds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Get all guilds', function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/guild",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"guild"
							]
						}
					},
					"response": [
						{
							"name": "Untitled Example",
							"originalRequest": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{v1Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Bearer",
										"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/guild",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"guild"
									]
								}
							},
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "cache-control",
									"value": "no-cache, private"
								},
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "access-control-allow-origin",
									"value": "*"
								}
							],
							"cookie": [],
							"body": "{\"Message\":\"You are not allowed for this api.\"}"
						}
					]
				},
				{
					"name": "Get a guild resource by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Get a guild resource by ID', function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/guild/{{UpGuildID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"guild",
								"{{UpGuildID}}"
							]
						}
					},
					"response": [
						{
							"name": "Untitled Example",
							"originalRequest": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{v1Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Bearer",
										"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/guild/{{UpGuildID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"guild",
										"{{UpGuildID}}"
									]
								}
							},
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "cache-control",
									"value": "no-cache, private"
								},
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "access-control-allow-origin",
									"value": "*"
								}
							],
							"cookie": [],
							"body": "{\"Message\":\"You are not allowed for this api.\"}"
						}
					]
				},
				{
					"name": "Get a guild resource by Slug",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Get a guild resource by Slug', function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/guild/slug/{{GuildSlug}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"guild",
								"slug",
								"{{GuildSlug}}"
							]
						}
					},
					"response": [
						{
							"name": "Untitled Example",
							"originalRequest": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{v1Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Bearer",
										"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/guild/slug/{{GuildSlug}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"guild",
										"slug",
										"{{GuildSlug}}"
									]
								}
							},
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "cache-control",
									"value": "no-cache, private"
								},
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "access-control-allow-origin",
									"value": "*"
								}
							],
							"cookie": [],
							"body": "{\"Message\":\"You are not allowed for this api.\"}"
						}
					]
				},
				{
					"name": "Returns the a result set via the search keyword.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Returns the a result set via the search keyword.', function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/guild/search/:keyword",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"guild",
								"search",
								":keyword"
							],
							"variable": [
								{
									"key": "keyword",
									"value": "omnis"
								}
							]
						}
					},
					"response": [
						{
							"name": "Untitled Example",
							"originalRequest": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{v1Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Bearer",
										"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/guild/search/:keyword",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"guild",
										"search",
										":keyword"
									],
									"variable": [
										{
											"key": "keyword",
											"value": "omnis"
										}
									]
								}
							},
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "cache-control",
									"value": "no-cache, private"
								},
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "access-control-allow-origin",
									"value": "*"
								}
							],
							"cookie": [],
							"body": "{\"Message\":\"You are not allowed for this api.\"}"
						}
					]
				},
				{
					"name": "Delete a guild.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Delete a guild', function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/guild/{{UpGuildID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"guild",
								"{{UpGuildID}}"
							]
						},
						"description": "@hideFromAPIDocumentation"
					},
					"response": []
				}
			]
		},
		{
			"name": "Company Gallery",
			"item": [
				{
					"name": "Register a new user. Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Register a new user', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\" Get New Registered User ID \", () => {\r",
									"  \r",
									"  const{data} = pm.response.json();\r",
									"   pm.environment.set('NewUserRegID', data.id);\r",
									"   pm.environment.set('UserEmail', data.email);\r",
									"   \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"first_name\":\"{{$randomFirstName}}\",\"middle_name\":\"der\",\"last_name\":\"{{$randomLastName}}\",\"username\":\"{{$randomUserName}}\",\"email\":\"{{$randomEmail}}\",\"password\":\"password123\",\"password_confirmation\":\"password123\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Generate credentials Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Login', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\" Get New Registered User ID \", () => {",
									"  ",
									"  const{data} = pm.response.json();",
									"   pm.environment.set('v1Token', data.access_token);",
									" ",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"{{UserEmail}}\",\"password\":\"password123\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new company",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Create a new company', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\" Get Company ID \", () => {",
									"  ",
									"  const{data} = pm.response.json();",
									"   pm.environment.set('CompanyID', data.id);",
									" ",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "voluptate",
									"type": "text"
								},
								{
									"key": "category",
									"value": "quo",
									"type": "text"
								},
								{
									"key": "country",
									"value": "nisi",
									"type": "text"
								},
								{
									"key": "languages[0]",
									"value": "perspiciatis",
									"type": "text"
								},
								{
									"key": "employees",
									"value": 1,
									"type": "text"
								},
								{
									"key": "about",
									"value": "corrupti",
									"type": "text"
								},
								{
									"key": "main_link",
									"value": "suscipit",
									"type": "text"
								},
								{
									"key": "avatar",
									"type": "file",
									"src": []
								},
								{
									"key": "banner",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/company",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"company"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new gallery.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Create a new gallery', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\" Get Gallery ID \", () => {",
									"  ",
									"  const{data} = pm.response.json();",
									"   pm.environment.set('CmpnyGllryID', data.id);",
									" ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "{{v1Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"file_name\":\"facilis\",\"gallery_type_id\":{{CompanyID}},\"gallery_type\":\"company\",\"order\":1,\"media_type\":\"external_link\",\"caption\":\"maxime\",\"cover\":0}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/gallery",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"gallery"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a gallery.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Update a gallery', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\" Get Updated Gallery ID \", () => {",
									"  ",
									"  const{data} = pm.response.json();",
									"   pm.environment.set('UpdateCmGllryID', data.id);",
									" ",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"file_name\":\"et\",\"order\":12,\"media_type\":\"video\",\"caption\":\"cumque\",\"cover\":0}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/gallery/{{CmpnyGllryID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"gallery",
								"{{CmpnyGllryID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all of gallery.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Get all gallery', function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v2/gallery",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"gallery"
							]
						}
					},
					"response": [
						{
							"name": "Untitled Example",
							"originalRequest": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{v1Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Bearer",
										"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/gallery",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"gallery"
									]
								}
							},
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "cache-control",
									"value": "no-cache, private"
								},
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "access-control-allow-origin",
									"value": "*"
								}
							],
							"cookie": [],
							"body": "{\"Message\":\"You are not allowed for this api.\"}"
						}
					]
				},
				{
					"name": "Delete a gallery.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Delete a gallery', function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v2/gallery/{{UpdateCmGllryID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"gallery",
								"{{UpdateCmGllryID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Games Gallery",
			"item": [
				{
					"name": "Register a new user.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Register a new user', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\" Get New Registered User ID \", () => {\r",
									"  \r",
									"  const{data} = pm.response.json();\r",
									"   pm.environment.set('NewUserRegID', data.id);\r",
									"   pm.environment.set('UserEmail', data.email);\r",
									"   \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"first_name\":\"{{$randomFirstName}}\",\"middle_name\":\"der\",\"last_name\":\"{{$randomLastName}}\",\"username\":\"{{$randomUserName}}\",\"email\":\"{{$randomEmail}}\",\"password\":\"password123\",\"password_confirmation\":\"password123\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Generate credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Login', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\" Get New Registered User ID \", () => {",
									"  ",
									"  const{data} = pm.response.json();",
									"   pm.environment.set('v1Token', data.access_token);",
									" ",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"{{UserEmail}}\",\"password\":\"password123\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new company.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Create a new company', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\" Get New Registered User ID \", () => {",
									"  ",
									"  const{data} = pm.response.json();",
									"   pm.environment.set('CompanyID', data.id);",
									" ",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "voluptate",
									"type": "text"
								},
								{
									"key": "category",
									"value": "quo",
									"type": "text"
								},
								{
									"key": "country",
									"value": "nisi",
									"type": "text"
								},
								{
									"key": "languages[0]",
									"value": "perspiciatis",
									"type": "text"
								},
								{
									"key": "employees",
									"value": 1,
									"type": "text"
								},
								{
									"key": "about",
									"value": "corrupti",
									"type": "text"
								},
								{
									"key": "main_link",
									"value": "suscipit",
									"type": "text"
								},
								{
									"key": "avatar",
									"type": "file",
									"src": []
								},
								{
									"key": "banner",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/company",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"company"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new game.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Adding a new game', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\" Get New Registered User ID \", () => {",
									"  ",
									"  const{data} = pm.response.json();",
									"   pm.environment.set('gameID', data.id);",
									" ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "{{v1Token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "zpipnftnouuoubqqseddcygzolsshswdmptcxmjbqixmvxqjwcusepkpbsgcpkkbrsxekwjibglazvguhlzyupghr",
									"description": "Must not be greater than 255 characters.",
									"type": "text"
								},
								{
									"key": "category",
									"value": "rpg",
									"type": "text"
								},
								{
									"key": "description",
									"value": "nrmhzjhcbfiekznsgxouvzzmgramqjajiwjpodjvmgnsycgrhdrmjebxwehyskwgucjttemqxaadfacufillbgqupjewfcrzihqpckdotlkjqmsorehuxrxazgjaqoxkupsvkhrhohwcckbwvywovxxefsmwlyfoussgwimblwgxrceirkxaqcosadeusntzdzwlgqjwfqdogkbeozhirsrfndfbvvlosuownsnpbgrmnzrrkuyqeluzjjblmjeickmiuzsptpcnrzejpzrqkdmviimfpssuegchwbzjbuwohcsfkynuxrpsjditurutkjrrgyqeegmclzovpmvxtrqckcbcbvriyskggvrbwguhetybqvjzxbednylsctiztnsqewakpiitzxymljenfkjoigkrldvhjswphbupebsrlx",
									"description": "Must not be greater than 1000 characters.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "token",
									"value": "quia",
									"description": "Token used in the game",
									"type": "text",
									"disabled": true
								},
								{
									"key": "about",
									"value": "pdtqpnoqsmooapryvidpfhyygkumxwswajjrcyeyuztuvvwdlloawxtxzzzbgotfbzgrrsjckbajhdkkfcurbbakzqopwsqjtguihhncsibuzxdmtudnnuwqewndhaxpazfcxnrebkukibhqdutdnjkqcsjsrajpvtanvpytjktoldmhtgxzhfdyjgbfdxniytvtezxxadhshxngaaqvnkjfpfdildeutqevqqbdotfhtjemfrzrdekpsfmkqbnborqgmghnvjiatfejmpcgurjteiarlywcxbxwlxzraajmdxjyqfashnckkefldacoihyweodqeackvmzfsvyhyafsianntazrbhoshbpjcmhgqdwaykltaqppufyjceldslgxmgzalbocvajtcrrkhqsirhpvirmngmhvalovdtbrhdppkazpszuvwrrrzzssiwmdbvdhppdmbwrqpzeihrtvcosxmrqlodjvsdhnmunouiqenwfnybdmfbtbcmejddzsuliohwqjwocspfbvlcjhaeviytjjsxsmnvyhzgazjuphkjstxwjpkpqisytmlsmssdieghtlzmyrbdlsijqexdtulexddkfdojppzizzacltzzmgtttnlcpbsbzxfzgjlchaipftxmlzkbdzzsyacnioylmwzhkdkurygdbghyxmciqsjudgoqtumzdzdjbseepabzsxqateborrqutagcksnzzhkfwgysqfwtwxraeyxpzlnmiqouqihkknpunsqisszsbmxtigrbdpmzzlyacvytyhyqzsnhtpvoskjmiqbzmzpvamjwvbycgcuudpnwnlamnpwowubyevgcinmcjlnormi",
									"description": "Must not be greater than 1000 characters.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "country",
									"value": "US",
									"description": "Must be one of <code>PH</code>, <code>US</code>, <code>AF</code>, <code>AX</code>, <code>AL</code>, <code>DZ</code>, <code>AS</code>, <code>AD</code>, <code>AO</code>, <code>AI</code>, <code>AQ</code>, <code>AG</code>, <code>AR</code>, <code>AM</code>, <code>AW</code>, <code>AU</code>, <code>AT</code>, <code>AZ</code>, <code>BS</code>, <code>BH</code>, <code>BD</code>, <code>BB</code>, <code>BY</code>, <code>BE</code>, <code>BZ</code>, <code>BJ</code>, <code>BM</code>, <code>BT</code>, <code>BO</code>, <code>BQ</code>, <code>BA</code>, <code>BW</code>, <code>BV</code>, <code>BR</code>, <code>IO</code>, <code>BN</code>, <code>BG</code>, <code>BF</code>, <code>BI</code>, <code>KH</code>, <code>CM</code>, <code>CA</code>, <code>CV</code>, <code>KY</code>, <code>CF</code>, <code>TD</code>, <code>CL</code>, <code>CN</code>, <code>CX</code>, <code>CC</code>, <code>CO</code>, <code>KM</code>, <code>CG</code>, <code>CD</code>, <code>CK</code>, <code>CR</code>, <code>CI</code>, <code>HR</code>, <code>CU</code>, <code>CW</code>, <code>CY</code>, <code>CZ</code>, <code>DK</code>, <code>DJ</code>, <code>DM</code>, <code>DO</code>, <code>EC</code>, <code>EG</code>, <code>SV</code>, <code>GQ</code>, <code>ER</code>, <code>EE</code>, <code>ET</code>, <code>FK</code>, <code>FO</code>, <code>FJ</code>, <code>FI</code>, <code>FR</code>, <code>GF</code>, <code>PF</code>, <code>TF</code>, <code>GA</code>, <code>GM</code>, <code>GE</code>, <code>DE</code>, <code>GH</code>, <code>GI</code>, <code>GR</code>, <code>GL</code>, <code>GD</code>, <code>GP</code>, <code>GU</code>, <code>GT</code>, <code>GG</code>, <code>GN</code>, <code>GW</code>, <code>GY</code>, <code>HT</code>, <code>HM</code>, <code>VA</code>, <code>HN</code>, <code>HK</code>, <code>HU</code>, <code>IS</code>, <code>IN</code>, <code>ID</code>, <code>IR</code>, <code>IQ</code>, <code>IE</code>, <code>IM</code>, <code>IL</code>, <code>IT</code>, <code>JM</code>, <code>JP</code>, <code>JE</code>, <code>JO</code>, <code>KZ</code>, <code>KE</code>, <code>KI</code>, <code>KP</code>, <code>KR</code>, <code>KW</code>, <code>KG</code>, <code>LA</code>, <code>LV</code>, <code>LB</code>, <code>LS</code>, <code>LR</code>, <code>LY</code>, <code>LI</code>, <code>LT</code>, <code>LU</code>, <code>MO</code>, <code>MK</code>, <code>MG</code>, <code>MW</code>, <code>MY</code>, <code>MV</code>, <code>ML</code>, <code>MT</code>, <code>MH</code>, <code>MQ</code>, <code>MR</code>, <code>MU</code>, <code>YT</code>, <code>MX</code>, <code>FM</code>, <code>MD</code>, <code>MC</code>, <code>MN</code>, <code>ME</code>, <code>MS</code>, <code>MA</code>, <code>MZ</code>, <code>MM</code>, <code>NA</code>, <code>NR</code>, <code>NP</code>, <code>NL</code>, <code>NC</code>, <code>NZ</code>, <code>NI</code>, <code>NE</code>, <code>NG</code>, <code>NU</code>, <code>NF</code>, <code>MP</code>, <code>NO</code>, <code>OM</code>, <code>PK</code>, <code>PW</code>, <code>PS</code>, <code>PA</code>, <code>PG</code>, <code>PY</code>, <code>PE</code>, <code>PN</code>, <code>PL</code>, <code>PT</code>, <code>PR</code>, <code>QA</code>, <code>RE</code>, <code>RO</code>, <code>RU</code>, <code>RW</code>, <code>BL</code>, <code>SH</code>, <code>KN</code>, <code>LC</code>, <code>MF</code>, <code>PM</code>, <code>VC</code>, <code>WS</code>, <code>SM</code>, <code>ST</code>, <code>SA</code>, <code>SN</code>, <code>RS</code>, <code>SC</code>, <code>SL</code>, <code>SG</code>, <code>SX</code>, <code>SK</code>, <code>SI</code>, <code>SB</code>, <code>SO</code>, <code>ZA</code>, <code>GS</code>, <code>SS</code>, <code>ES</code>, <code>LK</code>, <code>SD</code>, <code>SR</code>, <code>SJ</code>, <code>SZ</code>, <code>SE</code>, <code>CH</code>, <code>SY</code>, <code>TW</code>, <code>TJ</code>, <code>TZ</code>, <code>TH</code>, <code>TL</code>, <code>TG</code>, <code>TK</code>, <code>TO</code>, <code>TT</code>, <code>TN</code>, <code>TR</code>, <code>TM</code>, <code>TC</code>, <code>TV</code>, <code>UG</code>, <code>UA</code>, <code>AE</code>, <code>GB</code>, <code>UM</code>, <code>UY</code>, <code>UZ</code>, <code>VU</code>, <code>VE</code>, <code>VN</code>, <code>VG</code>, <code>VI</code>, <code>WF</code>, <code>EH</code>, <code>YE</code>, <code>ZM</code>, or <code>ZW</code>.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "email",
									"value": "{{UserEmail}}",
									"description": "Must be a valid email address.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "company_id",
									"value": "{{CompanyID}}",
									"type": "text"
								},
								{
									"key": "release_date",
									"value": "2022-11-10",
									"description": "Must be a valid date. Must be a valid date in the format <code>Y-m-d</code>.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "blockchain_ids[0]",
									"value": "ut",
									"type": "text",
									"disabled": true
								},
								{
									"key": "main_link",
									"value": "soluta",
									"type": "text",
									"disabled": true
								},
								{
									"key": "status",
									"value": "repellendus",
									"type": "text",
									"disabled": true
								},
								{
									"key": "device_ids[0]",
									"value": "voluptatem",
									"type": "text",
									"disabled": true
								},
								{
									"key": "status_type",
									"value": "harum",
									"type": "text",
									"disabled": true
								},
								{
									"key": "nft_asset",
									"value": "labore",
									"type": "text"
								},
								{
									"key": "marketplace_link",
									"value": "ullam",
									"type": "text",
									"disabled": true
								},
								{
									"key": "avatar",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "banner",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "thumbnail",
									"type": "file",
									"src": []
								},
								{
									"key": "profile_picture",
									"type": "file",
									"src": []
								},
								{
									"key": "logo",
									"type": "file",
									"src": []
								},
								{
									"key": "cover_photo",
									"type": "file",
									"src": []
								},
								{
									"key": "Platforms",
									"value": "MAC",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/game",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"game"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new gallery.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Adding a new game', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\" Get Gellery ID \", () => {",
									"  ",
									"  const{data} = pm.response.json();",
									"   pm.environment.set('GameGllryID', data.id);",
									" ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "{{v1Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"file_name\":\"facilis\",\"gallery_type_id\":{{gameID}},\"gallery_type\":\"game\",\"order\":1,\"media_type\":\"external_link\",\"caption\":\"maxime\",\"cover\":0}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/gallery",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"gallery"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a gallery.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Update a gallery', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\" Get Updated Gallery ID \", () => {",
									"  ",
									"  const{data} = pm.response.json();",
									"   pm.environment.set('UpdateGmGllryID', data.id);",
									" ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"file_name\":\"et\",\"order\":12,\"media_type\":\"video\",\"caption\":\"cumque\",\"cover\":0}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/gallery/{{GameGllryID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"gallery",
								"{{GameGllryID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all of gallery.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Getl all of gallery', function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v2/gallery",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"gallery"
							]
						}
					},
					"response": [
						{
							"name": "Untitled Example",
							"originalRequest": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{v1Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Bearer",
										"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/gallery",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"gallery"
									]
								}
							},
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "cache-control",
									"value": "no-cache, private"
								},
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "access-control-allow-origin",
									"value": "*"
								}
							],
							"cookie": [],
							"body": "{\"Message\":\"You are not allowed for this api.\"}"
						}
					]
				},
				{
					"name": "Delete a gallery.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Delete a gallery', function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v2/gallery/{{UpdateGmGllryID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"gallery",
								"{{UpdateGmGllryID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Guild Gallery",
			"item": [
				{
					"name": "Register a new user.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Register a new user', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\" Get New Registered User ID \", () => {\r",
									"  \r",
									"  const{data} = pm.response.json();\r",
									"   pm.environment.set('NewUserRegID', data.id);\r",
									"   pm.environment.set('UserEmail', data.email);\r",
									"   \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"first_name\":\"{{$randomFirstName}}\",\"middle_name\":\"der\",\"last_name\":\"{{$randomLastName}}\",\"username\":\"{{$randomUserName}}\",\"email\":\"{{$randomEmail}}\",\"password\":\"password123\",\"password_confirmation\":\"password123\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Generate credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Login', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\" Get New Registered User ID \", () => {",
									"  ",
									"  const{data} = pm.response.json();",
									"   pm.environment.set('v1Token', data.access_token);",
									" ",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"{{UserEmail}}\",\"password\":\"password123\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new guild",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Create a new company', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\" Get New Registered User ID \", () => {",
									"  ",
									"  const{data} = pm.response.json();",
									"   pm.environment.set('GuildID', data.id);",
									"   pm.environment.set('GuildSlug', data.slug)",
									" ",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "{{$randomEmail}}",
									"description": "Must be a valid email address. The value format is invalid.",
									"type": "text"
								},
								{
									"key": "name",
									"value": "{{$randomFirstName}}",
									"description": "Must not be greater than 100 characters.",
									"type": "text"
								},
								{
									"key": "description",
									"value": "jkfnrgawinujrsybxfefxnzkihtcxdxoksducgwpixopzfqnsqnmbglmpbhjiadrsprfictofdayjmyoxjcitpsagkjzkebhhboqtyxzqwzsmsmosauhuijykoaheiegvkuxofmglruqibwvputjflnjmarbdriggvupuiilhdgdmsyaktsiqlzgxffdwmqinfrxaypcbajbnsrvifdworxhfphvyrtxuqvcivvlqzadyhmxwpgcgoktuefvjtldgffwtujtubpycghijyztiybfremvygopqsguynigstmaahrbecgwctycvqnwneoiqpdxdlyzuejgqalmwyqwssbjbumdzyrldbxnruhvuehhybwllzmmlzefbgldnrewepxcfhnthgjdqxugnnpduniasazbxiictyuosohqgtmnbshhlinbezuxodkkuomkiyvgwovtmdryswsfffraldzqfbddkhydynznddzdwfemrlozszboxtzjjuxfwlarwmrcppqjkoxodoopijlzttouzykbrnoybqdfyaixtwkauiqmhcrfjxurdmfiu",
									"description": "Must not be greater than 1000 characters.",
									"type": "text"
								},
								{
									"key": "about",
									"value": "grfcwvuxeuuatewsiehtodbzlyifrgcvfylgidblwmtcfoxlbbmusftnuqisaymrvrnpkkplicifpkrpqfxcxhtncelxukgiqsjtbsdfikhfxalcscnolnyzdrdxkmlqtzggvmvpnszjtreynbggaztbfbvtogtfdmvfyyrqevngmfvqxxfcopjbhzzqkmkapfeedokbzqafxtgflmzzxpopvwegtaivkvfgcbpgekxqmaixdvxsujrfhjyydfjllfedjrbabbckcnnnfxygysquopqyvywepbdnnokvpniqzkwbltwvoaafrtzdkemwokbtdbkeyijdoigjmkqzvpqsksiqqjaclqzuhouukwtqacylvojapdhzrdsckqxapxcegedgzercuvxivmpqoklqfqczmxrksxisqaywkyhjanrkhsuwcjcdhwpaxsxrhnzawhbssevqksmxqgvxymkgwhmsgqrroeutpwzxwdwawnsdngkqsizsfavacojxstdnlfxxpbkwvydczfikvvpcovczsxsjbgsktpxyhvcluoyudusfegphifxcgsmntzcjhzmcvzclehrzhhnxyccuymjarofzouxcneowcckvr",
									"description": "Must not be greater than 1000 characters.",
									"type": "text"
								},
								{
									"key": "partner",
									"value": 1,
									"type": "text"
								},
								{
									"key": "social_media[0]",
									"value": "rerum",
									"type": "text"
								},
								{
									"key": "country",
									"value": "exercitationem",
									"type": "text"
								},
								{
									"key": "player_rewards",
									"value": "temporibus",
									"type": "text"
								},
								{
									"key": "logo",
									"type": "file",
									"src": []
								},
								{
									"key": "banner",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/guild",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"guild"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new gallery.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Create a new gallery', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\" Get Gellery ID \", () => {",
									"  ",
									"  const{data} = pm.response.json();",
									"   pm.environment.set('GuildGllryID', data.id);",
									" ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "{{v1Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"file_name\":\"facilis\",\"gallery_type_id\":{{GuildID}},\"gallery_type\":\"guild\",\"order\":1,\"media_type\":\"external_link\",\"caption\":\"maxime\",\"cover\":0}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/gallery",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"gallery"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a gallery.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Update a gallery', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\" Get Updated Gallery ID \", () => {",
									"  ",
									"  const{data} = pm.response.json();",
									"   pm.environment.set('UpdateGldGllryID', data.id);",
									" ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"file_name\":\"et\",\"order\":12,\"media_type\":\"video\",\"caption\":\"cumque\",\"cover\":0}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/gallery/{{GuildGllryID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"gallery",
								"{{GuildGllryID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all of gallery.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Get all of gallery', function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v2/gallery",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"gallery"
							]
						}
					},
					"response": [
						{
							"name": "Untitled Example",
							"originalRequest": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{v1Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Bearer",
										"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/gallery",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"gallery"
									]
								}
							},
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "cache-control",
									"value": "no-cache, private"
								},
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "access-control-allow-origin",
									"value": "*"
								}
							],
							"cookie": [],
							"body": "{\"Message\":\"You are not allowed for this api.\"}"
						}
					]
				},
				{
					"name": "Delete a gallery.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Delete a gallery', function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v2/gallery/{{UpdateGldGllryID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"gallery",
								"{{UpdateGldGllryID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User Gallery",
			"item": [
				{
					"name": "Register a new user. Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Register a new user', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\" Get New Registered User ID \", () => {\r",
									"  \r",
									"  const{data} = pm.response.json();\r",
									"   pm.environment.set('NewUserRegID', data.id);\r",
									"   pm.environment.set('UserEmail', data.email);\r",
									"   \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"first_name\":\"{{$randomFirstName}}\",\"middle_name\":\"der\",\"last_name\":\"{{$randomLastName}}\",\"username\":\"{{$randomUserName}}\",\"email\":\"{{$randomEmail}}\",\"password\":\"password123\",\"password_confirmation\":\"password123\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Generate credentials Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Login', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\" Get New Registered User ID \", () => {",
									"  ",
									"  const{data} = pm.response.json();",
									"   pm.environment.set('v1Token', data.access_token);",
									" ",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"{{UserEmail}}\",\"password\":\"password123\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new gallery.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Update a gallery', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\" Get Gellery ID \", () => {",
									"  ",
									"  const{data} = pm.response.json();",
									"   pm.environment.set('UsrGllryID', data.id);",
									" ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "{{v1Token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"file_name\":\"facilis\",\"gallery_type_id\":{{NewUserRegID}},\"gallery_type\":\"user\",\"order\":1,\"media_type\":\"external_link\",\"caption\":\"maxime\",\"cover\":0}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/gallery",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"gallery"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a gallery.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Update a gallery', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\" Get Updated Gallery ID \", () => {",
									"  ",
									"  const{data} = pm.response.json();",
									"   pm.environment.set('UpdateUsrGllryID', data.id);",
									" ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"file_name\":\"et\",\"order\":12,\"media_type\":\"video\",\"caption\":\"cumque\",\"cover\":0}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/gallery/{{UsrGllryID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"gallery",
								"{{UsrGllryID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all of gallery.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Get all gallery', function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v2/gallery",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"gallery"
							]
						}
					},
					"response": [
						{
							"name": "Untitled Example",
							"originalRequest": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{v1Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Bearer",
										"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/gallery",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"gallery"
									]
								}
							},
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "cache-control",
									"value": "no-cache, private"
								},
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "access-control-allow-origin",
									"value": "*"
								}
							],
							"cookie": [],
							"body": "{\"Message\":\"You are not allowed for this api.\"}"
						}
					]
				},
				{
					"name": "Delete a gallery.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Delete a gallery', function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v2/gallery/{{UpdateUsrGllryID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"gallery",
								"{{UpdateUsrGllryID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Messages - Threads Copy",
			"item": [
				{
					"name": "Create a new thread.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Create a new thread', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Get thread ID \", () => {",
									"  ",
									"  const{data} = pm.response.json();",
									"   pm.environment.set('messageDataId', data.id);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "subject",
									"value": "impedit",
									"type": "text"
								},
								{
									"key": "participants[0][user_id]",
									"value": 3,
									"type": "text"
								},
								{
									"key": "image",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/thread",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"thread"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a thread.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Update a thread', function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "subject",
									"value": "{{$randomFirstName}}",
									"type": "text"
								},
								{
									"key": "image",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/thread/{{messageDataId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"thread",
								"{{messageDataId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all of thread.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Get all of thread', function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v2/thread",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"thread"
							]
						}
					},
					"response": [
						{
							"name": "Untitled Example",
							"originalRequest": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{v1Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Bearer",
										"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/thread",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"thread"
									]
								}
							},
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "cache-control",
									"value": "no-cache, private"
								},
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "access-control-allow-origin",
									"value": "*"
								}
							],
							"cookie": [],
							"body": "{\"Message\":\"You are not allowed for this api.\"}"
						}
					]
				},
				{
					"name": "Get the thread by ID.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Get all threads by ID', function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "{{v1Token}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v2/thread/{{messageDataId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"thread",
								"{{messageDataId}}"
							]
						}
					},
					"response": [
						{
							"name": "Untitled Example",
							"originalRequest": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{v1Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Bearer",
										"value": "{{v1Token}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/thread/{{messageDataId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"thread",
										"{{messageDataId}}"
									]
								}
							},
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "cache-control",
									"value": "no-cache, private"
								},
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "access-control-allow-origin",
									"value": "*"
								}
							],
							"cookie": [],
							"body": "{\"Message\":\"You are not allowed for this api.\"}"
						}
					]
				}
			]
		},
		{
			"name": "Messages - Guilds Copy",
			"item": [
				{
					"name": "Create a new message.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Create a new message', function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"body\":\"expedita\",\"guild_id\":12}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/guild-message",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"guild-message"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Messages - Games Copy",
			"item": [
				{
					"name": "Create a new message.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Create a new message', function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"body\":\"doloribus\",\"game_id\":11}\r\n\r\n\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/game-message",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"game-message"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Follow User",
			"item": [
				{
					"name": "Register a new user - USER 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Register a new user', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\" Get New Registered User ID \", () => {\r",
									"  \r",
									"  const{data} = pm.response.json();\r",
									"   pm.environment.set('NewUserRegID', data.id);\r",
									"   pm.environment.set('UserEmail', data.email);\r",
									"   \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"first_name\":\"{{$randomFirstName}}\",\"middle_name\":\"der\",\"last_name\":\"{{$randomLastName}}\",\"username\":\"{{$randomUserName}}\",\"email\":\"{{$randomEmail}}\",\"password\":\"password123\",\"password_confirmation\":\"password123\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Generate credentials - USER 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Login', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\" Get New Registered User ID \", () => {",
									"  ",
									"  const{data} = pm.response.json();",
									"   pm.environment.set('v1Token', data.access_token);",
									"   pm.environment.set('FollowID1', data.user.id);",
									" ",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"{{UserEmail}}\",\"password\":\"password123\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logs out an authenticated user.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Logout an authenticated user', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "{{v1Token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register a new user - USER 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Register a new user', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\" Get New Registered User ID \", () => {\r",
									"  \r",
									"  const{data} = pm.response.json();\r",
									"   pm.environment.set('NewUserRegID', data.id);\r",
									"   pm.environment.set('UserEmail', data.email);\r",
									"   \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"first_name\":\"{{$randomFirstName}}\",\"middle_name\":\"der\",\"last_name\":\"{{$randomLastName}}\",\"username\":\"{{$randomUserName}}\",\"email\":\"{{$randomEmail}}\",\"password\":\"password123\",\"password_confirmation\":\"password123\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Generate credentials - USER 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Login', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\" Get New Registered User ID \", () => {",
									"  ",
									"  const{data} = pm.response.json();",
									"   pm.environment.set('v1Token', data.access_token);",
									" ",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"{{UserEmail}}\",\"password\":\"password123\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new follow.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Create a new follow for User', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\" Get Follow ID \", () => {",
									"  ",
									"  const{data} = pm.response.json();",
									"   pm.environment.set('UserFollowID', data.id);",
									" ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"followable_type\":\"user\",\"followable_id\":{{FollowID1}}}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/follow",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"follow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unfollow a object.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Unfollow', function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v2/follow/{{UserFollowID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"follow",
								"{{UserFollowID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Follow Game",
			"item": [
				{
					"name": "Register a new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Register a new user', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\" Get New Registered User ID \", () => {\r",
									"  \r",
									"  const{data} = pm.response.json();\r",
									"   pm.environment.set('NewUserRegID', data.id);\r",
									"   pm.environment.set('UserEmail', data.email);\r",
									"   \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"first_name\":\"{{$randomFirstName}}\",\"middle_name\":\"der\",\"last_name\":\"{{$randomLastName}}\",\"username\":\"{{$randomUserName}}\",\"email\":\"{{$randomEmail}}\",\"password\":\"password123\",\"password_confirmation\":\"password123\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Generate credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Login', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\" Get New Registered User ID \", () => {",
									"  ",
									"  const{data} = pm.response.json();",
									"   pm.environment.set('v1Token', data.access_token);",
									" ",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"{{UserEmail}}\",\"password\":\"password123\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "List of all the games Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: List of all games', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\" Get New Registered User ID \", () => {",
									"  ",
									"  const{data} = pm.response.json();",
									"   pm.environment.set('GameFollowID1', data.games[0].id);",
									" ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v2/game",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"game"
							]
						},
						"description": "Get all games together with related game accounts, filterable by user and guild."
					},
					"response": [
						{
							"name": "Untitled Example",
							"originalRequest": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{v1Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Bearer",
										"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/game",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"game"
									]
								},
								"description": "Get all games together with related game accounts, filterable by user and guild."
							},
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "cache-control",
									"value": "no-cache, private"
								},
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "access-control-allow-origin",
									"value": "*"
								}
							],
							"cookie": [],
							"body": "{\"Message\":\"You are not allowed for this api.\"}"
						}
					]
				},
				{
					"name": "Create a new follow.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Create a new follow for Game', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\" Get Unfollow ID \", () => {",
									"  ",
									"  const{data} = pm.response.json();",
									"   pm.environment.set('GameUnfollowID', data.id);",
									" ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"followable_type\":\"game\",\"followable_id\":{{GameFollowID1}}}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/follow",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"follow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unfollow a object.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Unfollow a Game', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v2/follow/{{GameUnfollowID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"follow",
								"{{GameUnfollowID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Follow Guild",
			"item": [
				{
					"name": "Register a new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Register a new user', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\" Get New Registered User ID \", () => {\r",
									"  \r",
									"  const{data} = pm.response.json();\r",
									"   pm.environment.set('NewUserRegID', data.id);\r",
									"   pm.environment.set('UserEmail', data.email);\r",
									"   \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"first_name\":\"{{$randomFirstName}}\",\"middle_name\":\"der\",\"last_name\":\"{{$randomLastName}}\",\"username\":\"{{$randomUserName}}\",\"email\":\"{{$randomEmail}}\",\"password\":\"password123\",\"password_confirmation\":\"password123\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Generate credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Login', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\" Get New Registered User ID \", () => {",
									"  ",
									"  const{data} = pm.response.json();",
									"   pm.environment.set('v1Token', data.access_token);",
									" ",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"{{UserEmail}}\",\"password\":\"password123\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all guilds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Get all guilds', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Get Follow ID \", () => {",
									"  ",
									"  const{data} = pm.response.json();",
									"   pm.environment.set('GuildFollowID1', data.guilds[0].id);",
									" ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/guild",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"guild"
							]
						}
					},
					"response": [
						{
							"name": "Untitled Example",
							"originalRequest": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{v1Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Bearer",
										"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/guild",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"guild"
									]
								}
							},
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "cache-control",
									"value": "no-cache, private"
								},
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "access-control-allow-origin",
									"value": "*"
								}
							],
							"cookie": [],
							"body": "{\"Message\":\"You are not allowed for this api.\"}"
						}
					]
				},
				{
					"name": "Create a new follow.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Create a new follow for Guild', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\" Get New Registered User ID \", () => {",
									"  ",
									"  const{data} = pm.response.json();",
									"   pm.environment.set('GuildUnfollowID', data.id);",
									" ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"followable_type\":\"guild\",\"followable_id\":{{GuildFollowID1}}}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/follow",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"follow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unfollow a object.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Unfollow a Guild', function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/follow/{{GuildUnfollowID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"follow",
								"{{GuildUnfollowID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Follow Company",
			"item": [
				{
					"name": "Register a new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Register a new user', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\" Get New Registered User ID \", () => {\r",
									"  \r",
									"  const{data} = pm.response.json();\r",
									"   pm.environment.set('NewUserRegID', data.id);\r",
									"   pm.environment.set('UserEmail', data.email);\r",
									"   \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"first_name\":\"{{$randomFirstName}}\",\"middle_name\":\"der\",\"last_name\":\"{{$randomLastName}}\",\"username\":\"{{$randomUserName}}\",\"email\":\"{{$randomEmail}}\",\"password\":\"password123\",\"password_confirmation\":\"password123\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Generate credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Login', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\" Get New Registered User ID \", () => {",
									"  ",
									"  const{data} = pm.response.json();",
									"   pm.environment.set('v1Token', data.access_token);",
									" ",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"{{UserEmail}}\",\"password\":\"password123\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all of company. Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Create a new company', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Get Follow ID \", () => {",
									"  ",
									"  const{data} = pm.response.json();",
									"   pm.environment.set('CompanyFollowID1', data.companies[0].id);",
									" ",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v2/company",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"company"
							]
						}
					},
					"response": [
						{
							"name": "Untitled Example",
							"originalRequest": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{v1Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Bearer",
										"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/company",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"company"
									]
								}
							},
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "cache-control",
									"value": "no-cache, private"
								},
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "access-control-allow-origin",
									"value": "*"
								}
							],
							"cookie": [],
							"body": "{\"Message\":\"You are not allowed for this api.\"}"
						}
					]
				},
				{
					"name": "Create a new follow.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Create a new follow for Guild', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\" Get New Registered User ID \", () => {",
									"  ",
									"  const{data} = pm.response.json();",
									"   pm.environment.set('CompanyUnfollowID', data.id);",
									" ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"followable_type\":\"company\",\"followable_id\":{{CompanyFollowID1}}}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/follow",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"follow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unfollow a object.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Unfollow a Company', function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v2/follow/{{CompanyUnfollowID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"follow",
								"{{CompanyUnfollowID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Follow Game Account",
			"item": [
				{
					"name": "Register a new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Register a new user', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\" Get New Registered User ID \", () => {\r",
									"  \r",
									"  const{data} = pm.response.json();\r",
									"   pm.environment.set('NewUserRegID', data.id);\r",
									"   pm.environment.set('UserEmail', data.email);\r",
									"   \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"first_name\":\"{{$randomFirstName}}\",\"middle_name\":\"der\",\"last_name\":\"{{$randomLastName}}\",\"username\":\"{{$randomUserName}}\",\"email\":\"{{$randomEmail}}\",\"password\":\"password123\",\"password_confirmation\":\"password123\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Generate credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Login', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\" Get New Registered User ID \", () => {",
									"  ",
									"  const{data} = pm.response.json();",
									"   pm.environment.set('v1Token', data.access_token);",
									" ",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"{{UserEmail}}\",\"password\":\"password123\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all of game post. Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Get all of game post', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\" Get slug \", () => {",
									"  ",
									"  const{data} = pm.response.json();",
									"   pm.environment.set('GameAccID', data.game_posts[0].id);",
									" ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v2/game-post",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"game-post"
							]
						}
					},
					"response": [
						{
							"name": "Untitled Example",
							"originalRequest": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{v1Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Bearer",
										"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v2/game-post",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v2",
										"game-post"
									]
								}
							},
							"code": 403,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "cache-control",
									"value": "no-cache, private"
								},
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "access-control-allow-origin",
									"value": "*"
								}
							],
							"cookie": [],
							"body": "{\"Message\":\"You are not allowed for this api.\"}"
						}
					]
				},
				{
					"name": "Create a new follow.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Create a new follow for Guild', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\" Get Game Account ID \", () => {",
									"  ",
									"  const{data} = pm.response.json();",
									"   pm.environment.set('GameAccUnfollowID', data.id);",
									" ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"followable_type\":\"gameaccount\",\"followable_id\":{{GameAccID}}}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v2/follow",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"follow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unfollow a object.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test: Unfollow a Game Post', function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{v1Token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Bearer",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v2/follow/{{GameAccUnfollowID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v2",
								"follow",
								"{{GameAccUnfollowID}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}